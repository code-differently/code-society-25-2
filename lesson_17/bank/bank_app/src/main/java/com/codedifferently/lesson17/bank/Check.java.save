package com.codedifferently.lesson17.bank;

import com.codedifferently.lesson17.bank.exceptions.CheckVoidedException;
import java.util.Objects;

/** Represents a check. */
public class Check {

  private final String checkNumber;
  private final double amount;
  private final CheckingAccount account; // source account
  private boolean isVoided = false;

  /**
   * Legacy constructor kept for compatibility with original tests: new Check("123456789", 50.0,
   * account)
   */
  public Check(String checkNumber, double amount, CheckingAccount account) {
    if (amount <= 0) {
      throw new IllegalArgumentException("Check amount must be positive");
    }
    this.checkNumber = checkNumber;
    this.amount = amount;
    this.account = account;
  }

  /**
   * NEW overload so callers can pass a check-writable source directly: new Check(sourceAccount,
   * 50.0)
   */
  public Check(AllowsChecks source, double amount) {
    this(((CheckingAccount) source).getAccountNumber(), amount, (CheckingAccount) source);
  }

  /** Was this check voided? */
  public boolean isVoided() {
    return isVoided;
  }

  /** Void this check. */
  public void voidCheck() {
    isVoided = true;
  }

  public String getCheckNumber() {
    return checkNumber;
  }

  public double getAmount() {
    return amount;
  }

  public CheckingAccount getAccount() {
    return account;
  }

  /** Withdraw from source and deposit to target; blocked if voided. */
  public void depositFunds(CheckingAccount target) {
    if (isVoided) {
      throw new CheckVoidedException("Check is voided");
    }
    account.withdraw(amount);
    target.deposit(amount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkNumber);
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || getClass() != obj.getClass()) return false;
    Check other = (Check) obj;
    return Objects.equals(checkNumber, other.checkNumber);
  }

  @Override
  public String toString() {
    return "Check{checkNumber='"
        + checkNumber
        + "', amount="
        + amount
        + ", account="
        + account.getAccountNumber()
        + "}";
  }
}
public void depositFunds(CheckingAccount target) {
  if (isVoided) {
    throw new CheckVoidedException("Check is voided");
  }
  account.withdraw(amount);
  target.deposit(amount);
  // prevent double-deposit attempts
  voidCheck();
}
