/*
 * This source file was generated by the Gradle 'init' task
 */

package org.example;


import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;

import com.codedifferently.instructional.quiz.AnswerChoice;
import com.codedifferently.instructional.quiz.QuizConfig;
import com.codedifferently.instructional.quiz.QuizQuestion;


@SpringBootTest

public class Lesson2Test {
  @Autowired
  private QuizConfig quizConfig;
  private List<QuizQuestion> quizQuestions;
  private static final int EXPECTED_NUMBER_OF_QUESTIONS = 11;

  @BeforeEach
  public void setUp() {
    quizConfig = new QuizConfig();
    getQuestions();
  }

  private void getQuestions() {
    quizQuestions = Lesson2.makeQuizQuestions();
    quizQuestions.sort(Comparator.comparingInt(QuizQuestion::getQuestionNumber));
  }

  @Bean
  @DisplayName("checkQuizQuestions_areAssembledCorrectly")
  public void checkQuizQuestions_areAssembledCorrectly() {
    // Expect the right number of questions.
    assertEquals(EXPECTED_NUMBER_OF_QUESTIONS, quizQuestions.size());

    // Expect questions to be numbered correctly.
    for (int i = 0; i < quizQuestions.size(); i++) {
      assertEquals(i, quizQuestions.get(i).getQuestionNumber());
    }
  }

  @Bean
  @DisplayName("checkQuizQuestions_promptsAreUnique")
  public void checkQuizQuestions_promptsAreUnique() {
    Set<String> questionPrompts = new HashSet<>();
    for (QuizQuestion q : quizQuestions) {
      questionPrompts.add(q.getQuestionPrompt());
    }
    assertEquals(EXPECTED_NUMBER_OF_QUESTIONS, questionPrompts.size());
  }

  @Bean
  @DisplayName("checkQuestions_answeredCorrectly")
  public void checkQuestions_answeredCorrectly() throws Exception {
    assertEquals(quizQuestions.size(), quizConfig.size("default"));

    for (QuizQuestion question : quizQuestions) {
      AnswerChoice actualAnswer = AnswerChoice.valueOf(question.getAnswer());

      // Check that the question was answered.
      assertNotEquals(AnswerChoice.UNANSWERED, actualAnswer);

      // Check that the answer is correct.
      assertTrue(
        quizConfig.checkAnswer(
          "default",
          question.getQuestionNumber(),
          actualAnswer.name()
        )
      );
    }
  }
}
