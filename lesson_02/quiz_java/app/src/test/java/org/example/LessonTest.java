/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.junit.jupiter.api.BeforeEach;

import com.codedifferently.instructional.quiz.AnswerChoice;
import com.codedifferently.instructional.quiz.MultipleChoiceQuizQuestion;
import com.codedifferently.instructional.quiz.QuizConfig;
import com.codedifferently.instructional.quiz.QuizQuestion;

class LessonTest {
     private QuizConfig quizConfig;
    private List<QuizQuestion> quizQuestions;

    private static final int EXPECTED_NUMBER_OF_QUESTIONS = 11;

    @BeforeEach
    public void setUp() {
        Path quizPath = Paths.get("src", "main", "resources", "quiz.yaml"); 
        quizConfig = new QuizConfig(quizPath.toAbsolutePath().toString());
        getQuestions();
    }

    private void getQuestions() {
       List<MultipleChoiceQuizQuestion> quizQuestions = Lesson.makeQuestions();
        quizQuestions.sort(Comparator.comparingInt(QuizQuestion::getQuestionNumber));
    }

    @Test
    public void checkQuizQuestions_areAssembledCorrectly() {
        // Expect the right number of questions
        assertEquals(EXPECTED_NUMBER_OF_QUESTIONS, quizQuestions.size());

        // Expect questions to be numbered correctly
        for (int i = 0; i < quizQuestions.size(); i++) {
            assertEquals(i, quizQuestions.get(i).getQuestionNumber());
        }
    }

    @Test
    public void checkQuizQuestions_promptsAreUnique() {
        Set<String> questionPrompts = new HashSet<>();
        for (QuizQuestion q : quizQuestions) {
            questionPrompts.add(q.getQuestionPrompt());
        }
        assertEquals(EXPECTED_NUMBER_OF_QUESTIONS, questionPrompts.size());
    }

    @Test
    public void checkQuestions_answeredCorrectly() throws Exception {
        assertEquals(quizQuestions.size(), quizConfig.size("default"));

        for (QuizQuestion question : quizQuestions) {
            String actualAnswer = question.getAnswer();

            // Check that the question was answered
            assertNotEquals(AnswerChoice.UNANSWERED, actualAnswer);

            // Check that the answer is correct
            assertTrue(
                quizConfig.checkAnswer(
                    "default",
                    question.getQuestionNumber(),
                    actualAnswer
                )
            );
        }
    }
    
}
